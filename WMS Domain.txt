1.There is no INV-ADJ transactoin logged when adjusting inventory by using audit count.
Solution:
There is a policy polcod ='HOST-TRANS' and polvar='AREA-MOVEMENT-TRANID', polval ='XXXX_CADJ' or polval='CADJ_XXXX' to enable the logging event,
make sure rtstr1 set with 'INV-ADJ' and rtnum1 = 1.

2.Configure user/rdt to able to get a directed work.
Configuration needed:
a. 'Directed Work Operation Maintenance'.
   Select the oprcod, add users for the oprcod and add the Vehicle Type for the oprcod.
b. 'Vehicle Type Maintenance'
   Make sure the vehicle type has access to the location access.
c. 'Device Maintenance'
   Configure the work area for the rdt device.
   
3. Get download information:
[select dl.dwnld_seq,
        dl.dwnld_stat_cd,
        dl.sys_id,
        to_char(dl.ins_dt, 'yyyy-mm-dd hh24:mi:ss') dwntime,
        hdr.dwnld_seq,
        dtl.ifd_seg_data,
        substr(dtl.ifd_seg_data, 1, 35) str,
        to_char(hdr.ins_dt, 'yyyy-mm-dd hh24:mi:ss') hdrtime
   from sl_ifd_data_hdr hdr,
        sl_ifd_data_dtl dtl,
        sl_dwnld dl
  where hdr.dwnld_seq = dl.dwnld_seq
    and hdr.ifd_data_seq = dtl.ifd_data_seq
    and hdr.ifd_id like 'VC_RCPT_INB_IFD%'
    and dtl.ifd_seg_data like '%3751817%'
  order by hdrtime]

[select dl.dwnld_seq,
        dl.dwnld_stat_cd,
        hdr.ifd_id,
        dl.sys_id,
        to_char(dl.ins_dt, 'yyyy-mm-dd hh24:mi:ss') dwntime,
        hdr.dwnld_seq,
        dtl.ifd_seg_data,
        substr(dtl.ifd_seg_data, 1, 35) str,
        to_char(hdr.ins_dt, 'yyyy-mm-dd hh24:mi:ss') hdrtime
   from sl_ifd_data_hdr hdr,
        sl_ifd_data_dtl dtl,
        sl_dwnld dl
  where hdr.dwnld_seq = dl.dwnld_seq
    and hdr.ifd_data_seq = dtl.ifd_data_seq
    and dtl.ifd_seg_data like '%8533%'
    and to_char(hdr.ins_dt, 'yyyy-mm-dd hh24') >= '2018-06-07 18'
    and to_char(hdr.ins_dt, 'yyyy-mm-dd hh24') <= '2018-06-07 20'
  order by hdrtime]

4. Get event data:
[select e.evt_stat_cd, r.*
   from sl_evt_data e,
        sl_evt_arg_data r
  where e.evt_id ='SHIP_LOAD'
    and e.evt_data_seq = r.evt_data_seq
    and r.evt_arg_id ='TRAILER_ID'
    and to_char(evt_dt,'yyyy-mm-dd') = '2017-02-13'
    and evt_arg_val in (select trlr_id from ship_struct_view ssv where ship_id in (select ship_id from ship_struct_view ssv2 where ssv.car_move_id = ssv2.car_move_id and not exists (select 'x' from pckwrk_view pv where pv.ship_id = ssv.ship_id)))]

5. Moca command performance:
list command usage
|
if ((@execution_count > 100 and @avg_ms > 10000) or @avg_ms > 10000)
{
   publish data where component_level = @component_level
and command = @command
and type = @type
and command_path = @command_path
and execution_count = @execution_count
and min_ms = @min_ms
and max_ms = @max_ms
and avg_ms = @avg_ms
and total_ms = @total_ms
and self_ms = @self_ms
and avg_self_ms = @avg_self_ms
}

6. profile for locations for version higher than 9.1:
[select lm.wh_id,
        lm.arecod,
        lt.loc_typ,
        max(lm.stoloc) maxloc,
        min(lm.stoloc) minloc,
        sz.sto_zone_cod,
        mz.mov_zone_cod,
        pz.pck_zone_cod,
        wz.wrkzon,
        wz.wrkare,
        sum(decode(im.stoloc, null, 0, 1)) nonEmptyLocCnt,
        sum(decode(im.stoloc, null, 1, 0)) emptyLocCnt
   from locmst lm
   left
   join loc_typ lt
     on lm.loc_typ_id = lt.loc_typ_id
   left
   join sto_zone sz
     on lm.sto_zone_id = sz.sto_zone_id
   left
   join mov_zone mz
     on lm.mov_zone_id = mz.mov_zone_id
   left
   join pck_zone pz
     on lm.pck_zone_id = pz.pck_zone_id
   left
   join zonmst wz
     on lm.wrk_zone_id = wz.wrk_zone_id
   left
   join invsum im
     on lm.stoloc = im.stoloc
    and lm.wh_id = im.wh_id
  group by lm.wh_id,
        lm.arecod,
        lt.loc_typ,
        sz.sto_zone_cod,
        mz.mov_zone_cod,
        pz.pck_zone_cod,
        wz.wrkzon,
        wz.wrkare
  order by wh_id,
        arecod,
        loc_typ,
        sto_zone_cod]

7. Allocation Search Path information:
[select asp.wh_id,
        asp.search_path_typ,
        aspc.alloc_search_path_id,
        aspr.alloc_search_path_rule_id,
        aspr.srtseq,
        aspr.bldg_id,
        aspr.lodlvl,
        aspr.uomcod,
        aspr.reg_uom,
        aspc.alloc_search_path_criteria_id,
        aspc.colnam,
        aspc.colval,
        pz.pck_zone_id,
        pz.pck_zone_cod,
        pz.lodflg,
        pz.subflg,
        pz.dtlflg,
        pz.pipflg,
        pm.pck_mthd_id,
        pm.pck_mthd_nam,
        pm.list_flg,
        pm.ctn_flg,
        pm.skip_pick_valdt,
        pm.rsv_pck_rel,
        pm.mix_cs_flg,
        pm.inline_rpl_flg
   from alloc_search_path asp,
        alloc_search_path_rule aspr,
        alloc_search_path_criteria aspc,
        pck_zone pz,
        pck_mthd pm
  where asp.alloc_search_path_id = aspr.alloc_search_path_id
    and asp.alloc_search_path_id = aspc.alloc_search_path_id
    and aspr.pck_zone_id = pz.pck_zone_id
    and aspr.pck_mthd_id = pm.pck_mthd_id
  order by wh_id,
        search_path_typ,
        alloc_search_path_id,
        srtseq,
        alloc_search_path_rule_id,
        colnam]

8. Storage configuration:
[select sc.wh_id,
        sz.bldg_id,
        sc.sto_config_id,
        scr.sto_config_rule_id,
        scr.srtseq,
        scr.sto_zone_id,
        sz.sto_zone_cod,
        scr.strategy,
        scr.min_lvl,
        scr.max_lvl,
        scr.max_lod_per_aisle,
        scc.sto_config_criteria_id,
        scc.colnam,
        scc.colval,
        sum(decode(lm.locsts, 'P', 1, 0)) PartialLocCnt,
        sum(decode(lm.locsts, 'F', 1, 0)) FullLocCnt,
        sum(decode(lm.locsts, 'E', 1, 0)) EmptyLocCnt,
        sum(decode(lm.locsts, 'P', 0, 'E', 0, 'F', 0, 1)) ErrorLocCnt
   from sto_config sc,
        sto_config_rule scr,
        sto_config_criteria scc,
        sto_zone sz,
        locmst lm
  where sc.sto_config_id = scr.sto_config_id
    and scr.sto_config_id = scc.sto_config_id
    and scr.sto_zone_id = sz.sto_zone_id
    and sz.sto_zone_id = lm.sto_zone_id
    and sz.wh_id = lm.wh_id
  group by sc.wh_id,
        sz.bldg_id,
        sc.sto_config_id,
        scr.sto_config_rule_id,
        scr.srtseq,
        scr.sto_zone_id,
        sz.sto_zone_cod,
        scr.strategy,
        scr.min_lvl,
        scr.max_lvl,
        scr.max_lod_per_aisle,
        scc.sto_config_criteria_id,
        scc.colnam,
        scc.colval
  order by wh_id,
        bldg_id,
        srtseq,
        sto_config_id,
        sto_config_rule_id]

9.Assigned Location:

[select lm.wh_id,
        lm.arecod,
        sz.sto_zone_id,
        sz.sto_zone_cod,
        sum(decode(lm.locsts, 'P', 1, 0)) PartialLocCnt,
        sum(decode(lm.locsts, 'F', 1, 0)) FullLocCnt,
        sum(decode(lm.locsts, 'E', 1, 0)) EmptyLocCnt,
        sum(decode(lm.locsts, 'P', 0, 'E', 0, 'F', 0, 1)) ErrorLocCnt,
        sum(decode(lm.useflg, 1, 1, 0)) useableLocCnt,
        sum(decode(lm.useflg, 1, 0, 1)) notUseableLocCnt
   from rplcfg r,
        locmst lm,
        sto_zone sz
  where r.stoloc = lm.stoloc
    and r.wh_id = lm.wh_id
    and lm.sto_zone_id = sz.sto_zone_id
    and lm.useflg = 1
  group by lm.wh_id,
        lm.arecod,
        sz.sto_zone_id,
        sz.sto_zone_cod]

10. 2 Ways to find device which is not currently being used by someone.
a.) check devmst table with lst_usr_id is null:
[select *
   from devmst
  where lst_usr_id is null]

b.) check rftmst curstoloc is null
[select *
   from rftmst
  where curstoloc is null]

11. Define max device access:

/* For given vehtyp for work area*/
[select maxdev
   from wrkare_veh_typ]
   
/* For given work zone */
[select maxdev
   from zonmst]

/* For given vehtyp for work zone*/
[select maxdev
   from wrkzon_veh_typ]

12. Get all background service work flow:
       [select sm.serv_id,
               sia.cmd,
               sia.rpt_id
          from serv_mst sm,
               serv_ins si,
               serv_ins_action sia,
               wh_serv ws,
               wh_serv_exitpnt wse
         where sm.serv_id = si.serv_id
           and si.serv_ins_id = sia.serv_ins_id
           and ws.serv_id = sm.serv_id 
           and @+ws.wh_id^wh_id
           and ws.serv_id = wse.serv_id
           and ws.wh_id = wse.wh_id
           and sm.serv_typ = 'BCKSERV'
           and ws.serv_enaflg = 1
           and wse.exitpnt_typ = 'SERVICE-BACKGROUND'
           and @+wse.exitpnt^exitpnt
           and sia.serv_action_cod = 'RUNCMD'
      order by ws.seqnum, si.seqnum, sia.seqnum]
      
13. Script for monitor problems, blow script will create a csv file include interested data and send to mail:
publish data
 where filnam = 'problem_report_' || to_char(sysdate, 'yyyy-mm-dd') || '.csv'
   and path = 'd:\'
|
{
    execute os command
     where cmd = 'del ' || @path || @filnam catch(@?);
    do loop
     where count = 2
    |
    go to sleep
     where time = 3
    |
    [select @i ID,
            to_char(sysdate, 'yyyy/mm/dd hh24:mi:ss') crt_dte,
            pv.*
       from pckwrk_view pv
      where pv.unassign_flg = 0
        and pv.pcksts = 'R'
        and pv.appqty = 0] catch(-1403) >> res
    |
    if (@? = 0)
    {
        write csv file
         where filnam = @filnam
           and path = @path
           and resData = @res;
        send email
         where hostname = 'smtp.gmail.com'
           and user = 'samniboy2550@gmail.com'
           and password = 'Google,16'
           and port = '587'
           and enableTLS = '1'
           and send_to = 'sni@ascensionlogistics.com'
           and mail_from = 'samniboy2550@gmail.com'
           and subject = 'Problem Report'
           and msg = 'See attachment for problem report.'
           and attachment = @path || @filnam
    }
}


/* Order fulfill rate*/
  publish data
  where start_dte = '2018-09-20'
      and end_dte = '2018-09-26'
  |
[select count(distinct ordnum||'|'||ordlin) line_count,
          sum(NumOfUom_Ordered) NumOfUom_Ordered_Total,
          sum(NumOfUom_Shipped) NumOfUom_Shipped_Total,
          sum(NumOfUom_Shorted) NumOfUom_Shorted_Total,
          sum(cancnt) Cancel_Count,
          sum(can_usr_cnt) Cancel_user_count,
          round(sum(NumOfUom_Shipped) / sum(NumOfUom_Ordered), 2) * 100 FullfillRate,
          atDay
from
(select ol.ordnum,
        ol.ordlin,
        ol.prtnum,
        round(ol.ordqty / decode(sign(pv.untpak), 0, pv.untcas, pv.untpak)) NumOfUom_Ordered,
        round(pwk.appqty / decode(sign(pv.untpak), 0, pv.untcas, pv.untpak)) NumOfUom_Shipped,
        round((ol.ordqty - pwk.appqty) / decode(sign(pv.untpak), 0, pv.untcas, pv.untpak)) NumOfUom_Shorted,
        im.avaqty,
        cp.cancnt,
        loccnt,
        can_usr_cnt,
        to_char(ssv.loddte, 'yyyy-mm-dd') atDay
from ord_line ol 
join (select sum(appqty) appqty, ordnum, ordlin, wh_id from pckwrk_view group by ordnum, ordlin, wh_id) pwk
  on ol.ordnum = pwk.ordnum
and ol.ordlin = pwk.ordlin
and ol.wh_id = pwk.wh_id
join prtmst_view pw
  on ol.prtnum = pw.prtnum
 and ol.prt_client_id = pw.prt_client_id
 and ol.wh_id = pw.wh_id
join prtftp_view pv
on ol.prtnum = pv.prtnum
and ol.prt_client_id = pv.prt_client_id
and ol.wh_id = pv.wh_id
and pv.defftp_flg = 1
join shipment_line sl 
on ol.ordnum = sl.ordnum 
and ol.ordlin = sl.ordlin 
and ol.wh_id = sl.wh_id 
join ship_struct_view ssv 
on sl.ship_id = ssv.ship_id
left join (select sum(untqty - comqty) avaqty, prtnum, prt_client_id, wh_id from invsum group by prtnum, prt_client_id, wh_id) im
on ol.prtnum = im.prtnum
and ol.prt_client_id = im.prt_client_id
and ol.wh_id = im.wh_id
left join (select count(*) cancnt,
                  count(distinct srcloc) loccnt,
                  count(distinct can_usr_id) can_usr_cnt,
                  ordnum,
                  ordlin,
                  wh_id
        from canpck, cancod
       where canpck.cancod = cancod.codval
        and cancod.reaflg = 0
       group by wh_id, ordnum, ordlin) cp
 on ol.ordnum = cp.ordnum
and ol.ordlin = cp.ordlin
and ol.wh_id = cp.wh_id
where ol.shpqty < ol.ordqty
and ssv.shpsts = 'C'
and ol.prtnum not like '88888888%'
and im.avaqty > 0
and to_char(ssv.loddte, 'yyyy-mm-dd') >= @start_dte
and to_char(ssv.loddte, 'yyyy-mm-dd') <= @end_dte
) t
group by atDay]



/* order short detail*/
  publish data
  where start_dte = '2018-09-26'
      and end_dte = '2018-09-26'
  |
[select ol.ordnum,
        ol.ordlin,
        ol.prtnum,
        ol.ordqty / decode(pw.dspuom, 'IP', pv.untpak, 'CS', pv.untcas, 'PA', pv.untpal, 'EA', 1) NumOfUom_Ordered,
        pwk.appqty / decode(pw.dspuom, 'IP', pv.untpak, 'CS', pv.untcas, 'PA', pv.untpal, 'EA', 1) NumOfUom_Shipped,
        (ol.ordqty - pwk.appqty) / decode(pw.dspuom, 'IP', pv.untpak, 'CS', pv.untcas, 'PA', pv.untpal, 'EA', 1) NumOfUom_Shorted,
        cp.cancnt,
        loccnt,
        can_usr_cnt
from ord_line ol 
join (select sum(appqty) appqty, ordnum, ordlin, wh_id from pckwrk_view group by ordnum, ordlin, wh_id) pwk
  on ol.ordnum = pwk.ordnum
and ol.ordlin = pwk.ordlin
and ol.wh_id = pwk.wh_id
join prtmst_view pw
  on ol.prtnum = pw.prtnum
 and ol.prt_client_id = pw.prt_client_id
 and ol.wh_id = pw.wh_id
join prtftp_view pv
on ol.prtnum = pv.prtnum
and ol.prt_client_id = pv.prt_client_id
and ol.wh_id = pv.wh_id
and pv.defftp_flg = 1
join shipment_line sl 
on ol.ordnum = sl.ordnum 
and ol.ordlin = sl.ordlin 
and ol.wh_id = sl.wh_id 
join ship_struct_view ssv 
on sl.ship_id = ssv.ship_id
left join (select sum(untqty - comqty) avaqty, prtnum, prt_client_id, wh_id from invsum group by prtnum, prt_client_id, wh_id) im
on ol.prtnum = im.prtnum
and ol.prt_client_id = im.prt_client_id
and ol.wh_id = im.wh_id
left join (select count(*) cancnt,
                  count(distinct srcloc) loccnt,
                  count(distinct can_usr_id) can_usr_cnt,
                  ordnum,
                  ordlin,
                  wh_id
        from canpck, cancod
       where canpck.cancod = cancod.codval
        and cancod.reaflg = 0
       group by wh_id, ordnum, ordlin) cp
 on ol.ordnum = cp.ordnum
and ol.ordlin = cp.ordlin
and ol.wh_id = cp.wh_id
where ol.shpqty < ol.ordqty
and ssv.shpsts = 'C'
and ol.prtnum not like '88888888%'
and im.avaqty > (ol.ordqty - pwk.appqty)
and to_char(ssv.loddte, 'yyyy-mm-dd') >= @start_dte
and to_char(ssv.loddte, 'yyyy-mm-dd') <= @end_dte
]