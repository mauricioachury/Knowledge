<command>

<name>list inventory subloads for display</name>

<description>List Inventory Subloads For Display</description>

<type>Local Syntax</type>

<local-syntax>
<![CDATA[
    /* We want to push the warehouse ID to the stack here. */
    [select wh_id
       from wh
      where @+wh_id] catch(-1403)
    |
    get client in clause for user
          where usr_id = nvl(@usr_id, @@usr_id)
            and @+wh_id
            and table_prefix = 'invdtl' 
            and prt_client_id_flg = 1
    |
    /* If query is by Stoloc, then check whether its a dock door */ 
    if(@stoloc != '')
    {
        /* This command will return the storage trailer logical location 
         * if the passed in stoloc is a dock door for storage trailers and 
         * trailer at the dock door is a storage trailer. Otherwise the 
         * passed in stoloc is returned as-is. The purpose is to allow 
         * inventory display for storage trailers based on its dock door
         * rather than its logical location since the latter is a system
         * generated ID that is not as easily available for input.
         */
        translate yard location to trailer location
            where stoloc = @stoloc
              and wh_id = @wh_id
    }
    |
    /* Get text for a description when a column contains many distinct 
     * values, from les_mls_cat in the locale language; if text was not 
     * provided in the locale, then default to US_ENGLISH */
    get mls text 
        where mls_id = 'lblMany' 
          and locale_id = nvl(@locale_id, @@locale_id) catch (-1403)
    |
    publish data where MANY_VALUES = @MLS_TEXT
    |
    /* Changed "MIXED PARTS" in the decode for prtnum 
     * to the mls_text value of "lbl_mixed_part", which usually is set as "Mixed Item" */
    get mls text
        where mls_id = 'lbl_mixed_part'
          and locale_id = nvl(@locale_id, @@locale_id) catch (-1403)
    |
    if (@? = -1403)
    {
        publish data where mixed_item = 'Mixed Items'
    }
    else
    {
        publish data where mixed_item = @mls_text
    }
    |
    publish data where find_matching_kits = @find_matching_kits
    |
    /*
     * Fixed by WMD-62034
     * Removed the left outer join invhld since it is no longer needed to check the hld_flg.
     * The hld_flg is coming from the invdtl table.  This left outer join was also the cause
     * of unit quantity incorrectly displaying with multiple held inventory.
     */

    /*
     * Removed the left outer join inv_ser_num from the outer query and pushed it to the
     * inner query. Since this was the cause for unit quantity being displayed incorrectly
     * for serialized items with multiple serial types.
     */
    [select bldg_mst.wh_id,
            aremst.bldg_id,
            aremst.arecod,
            locmst.stoloc,
            manfst.traknm,
            invlod.lodnum,
            invsub.subnum,
            decode(max(invdtl.prtnum), min(invdtl.prtnum), max(invdtl.prtnum), @mixed_item) prtnum,
            decode(max(invdtl.prtnum), min(invdtl.prtnum), max(prtdsc.lngdsc), '') lngdsc,
            decode(max(prtmst_view.dept_cod), min(prtmst_view.dept_cod), max(prtmst_view.dept_cod), 'Mixed Departments') dept_cod,
            decode(count(distinct invdtl.prt_client_id), 1, min(invdtl.prt_client_id), 0, '', @MANY_VALUES) prt_client_id,
            decode(count(distinct invdtl.invsts), 1, min(invdtl.invsts), 0, '', @MANY_VALUES) invsts,
            sum(invdtl.untqty) untqty,
            decode(count(distinct invdtl.lotnum), 1, min(invdtl.lotnum), 0, '', @MANY_VALUES) lotnum,
            decode(count(distinct invdtl.sup_lotnum), 1, min(invdtl.sup_lotnum), 0, '', @MANY_VALUES) sup_lotnum,
            decode(count(distinct invdtl.revlvl), 
                   1, min(revlvl), 
                   0, '', 
                   @MANY_VALUES) revlvl,
            decode(count(distinct invdtl.orgcod), 
                   1, min(invdtl.orgcod), 
                   0, '', 
                   @MANY_VALUES) orgcod,
            decode(count(distinct invdtl.supnum), 
                   1, min(invdtl.supnum), 
                   0, '', 
                   @MANY_VALUES) supnum,
            decode(count(distinct invdtl.fifdte), 
                   1, to_char(min(invdtl.fifdte)),
                   0, '', 
                   @MANY_VALUES) fifdte,
            decode(count(distinct invdtl.mandte), 
                   1, to_char(min(invdtl.mandte)),
                   0, '', 
                   @MANY_VALUES) mandte,
            decode(count(distinct invdtl.rcvdte), 
                   1, to_char(min(invdtl.rcvdte)),
                   0, '', 
                   @MANY_VALUES) rcvdte,
            decode(count(distinct invdtl.expire_dte), 
                   1, to_char(min(invdtl.expire_dte)),
                   0, '', 
                   @MANY_VALUES) expire_dte,
            decode(count(distinct invdtl.inv_attr_str1), 
                   1, min(invdtl.inv_attr_str1), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str1,
            decode(count(distinct invdtl.inv_attr_str2),
                   1, min(invdtl.inv_attr_str2), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str2,
            decode(count(distinct invdtl.inv_attr_str3),
                   1, min(invdtl.inv_attr_str3), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str3,
            decode(count(distinct invdtl.inv_attr_str4),
                   1, min(invdtl.inv_attr_str4), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str4,
            decode(count(distinct invdtl.inv_attr_str5),
                   1, min(invdtl.inv_attr_str5), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str5,
            decode(count(distinct invdtl.inv_attr_str6),
                   1, min(invdtl.inv_attr_str6), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str6,
            decode(count(distinct invdtl.inv_attr_str7),
                   1, min(invdtl.inv_attr_str7), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str7,
            decode(count(distinct invdtl.inv_attr_str8),
                   1, min(invdtl.inv_attr_str8), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str8,
            decode(count(distinct invdtl.inv_attr_str9),
                   1, min(invdtl.inv_attr_str9), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str9,
            decode(count(distinct invdtl.inv_attr_str10),
                   1, min(invdtl.inv_attr_str10), 
                   0, '', 
                   @MANY_VALUES) inv_attr_str10,
            decode(count(distinct invdtl.inv_attr_int1),
                   1, min(invdtl.inv_attr_int1), 
                   0, '', 
                   cast(null as int)) inv_attr_int1,
            decode(count(distinct invdtl.inv_attr_int2),
                   1, min(invdtl.inv_attr_int2), 
                   0, '', 
                   cast(null as int)) inv_attr_int2,
            decode(count(distinct invdtl.inv_attr_int3),
                   1, min(invdtl.inv_attr_int3), 
                   0, '', 
                   cast(null as int)) inv_attr_int3,
            decode(count(distinct invdtl.inv_attr_int4),
                   1, min(invdtl.inv_attr_int4), 
                   0, '', 
                   cast(null as int)) inv_attr_int4,
            decode(count(distinct invdtl.inv_attr_int5),
                  1, min(invdtl.inv_attr_int5), 
                   0, '', 
                   cast(null as int)) inv_attr_int5,
            decode(count(distinct invdtl.inv_attr_flt1),
                   1, min(invdtl.inv_attr_flt1), 
                   0, '', 
                   cast(null as float)) inv_attr_flt1,
            decode(count(distinct invdtl.inv_attr_flt2),
                   1, min(invdtl.inv_attr_flt2), 
                   0, '', 
                   cast(null as float)) inv_attr_flt2,
            decode(count(distinct invdtl.inv_attr_flt3),
                   1, min(invdtl.inv_attr_flt3), 
                   0, '', 
                   cast(null as float)) inv_attr_flt3,
            decode(count(distinct invdtl.inv_attr_dte1),
                   1, 
                   min(to_char(invdtl.inv_attr_dte1)), 
                   0, '', 
                   @MANY_VALUES) inv_attr_dte1,
            decode(count(distinct invdtl.inv_attr_dte2),
                   1, 
                   min(to_char(invdtl.inv_attr_dte2)),  
                   0, '', 
                   @MANY_VALUES) inv_attr_dte2,
            max(invsub.subucc)subucc,
            max(invsub.subtag)subtag,
            max(invlod.loducc)loducc,
            max(invlod.lodtag)lodtag,
            max(child_asset_link.asset_id)ch_asset_id,
            max(invsub.asset_typ)ch_asset_typ,
            max(child_asset_typ.asset_len)asset_len,
            max(child_asset_typ.asset_wid)asset_wid,
            max(child_asset_typ.asset_hgt)asset_hgt,
            max(child_asset_typ.asset_wgt)asset_wgt,
            max(parent_asset_link.asset_id) parent_asset_id,
            max(invlod.asset_typ) parent_asset_typ,
            max(parent_asset_typ.asset_len) parent_asset_len,
            max(parent_asset_typ.asset_wid) parent_asset_wid,
            max(parent_asset_typ.asset_hgt) parent_asset_hgt,
            max(parent_asset_typ.asset_wgt) parent_asset_wgt,
            max(invsub.phyflg)phyflg,
            max(invlod.avg_unt_catch_qty)avg_unt_catch_qty,
            max(locmst.useflg)useflg,
            max(locmst.pckflg)pckflg,
            max(locmst.cipflg)cipflg,
            max(locmst.locsts)locsts,
            decode(prtmst_view.dspuom,
                   null, sum(invdtl.untqty),
                   nvl(sum(invdtl.untqty), 0)/prtftp_dtl.untqty) dsp_untqty,
            decode(prtmst_view.dspuom,
                   null, prtmst_view.stkuom,
                   prtmst_view.dspuom) untqty_uom,
            decode(prtmst_view.dspuom,
                   null, cast(null as int), 
                   prtmst_view.stkuom, cast(null as int),
                   mod(sum(invdtl.untqty), prtftp_dtl.untqty)) rem_untqty,
            decode(prtmst_view.dspuom,
                   null, null,
                   prtmst_view.stkuom, null,
                   prtmst_view.stkuom) rem_untqty_uom,
            invdtl.cstms_cnsgnmnt_id,
            invdtl.rttn_id,
            invdtl.dty_stmp_flg,
            invdtl.cstms_bond_flg
      from aremst
      join locmst
        on (aremst.arecod = locmst.arecod)
       and (aremst.wh_id  = locmst.wh_id)
       and @+aremst.arecod 
       and @+aremst.bldg_id
       and @+aremst.adjflg
       and @+locmst.stoloc
       and @+locmst.wh_id
       and @+locmst.velzon
       and @+locmst.abccod
       and @+locmst.cntdte:date
       and @+locmst.lstdte:date       
      join bldg_mst
        on (aremst.bldg_id = bldg_mst.bldg_id)
       and (aremst.wh_id   = bldg_mst.wh_id)
      join invlod
        on (locmst.stoloc = invlod.stoloc) 
       and (locmst.wh_id  = invlod.wh_id)
       and @+invlod.lodnum
       and @+invlod.adddte:date
       and @+invlod.lstdte:date
       and @+invlod.uccdte:date
       and @+invlod.asset_typ       
      join invsub 
        on (invlod.lodnum = invsub.lodnum)
       and @+invsub.subnum
       and @+invsub.adddte:date
       and @+invsub.lstdte:date
       and @+invsub.uccdte:date
       and @+invsub.adddte:date
       and @+invsub.lstdte:date
       and @+invsub.uccdte:date
       and (@+invsub.lstmov:date or @+invlod.lstmov:date)
      join invdtl
       on (invsub.subnum = invdtl.subnum)
       and @+invdtl.prt_client_id
       and @+invdtl.age_pflnam
       and @+invdtl.dtlnum
       and @+invdtl.ftpcod
       and @+invdtl.prtnum
       and @+invdtl.supnum
       and @+invdtl.fifdte:date
       and @+invdtl.mandte:date
       and @+invdtl.adddte:date
       and @+invdtl.lstdte:date
       and @+invdtl.rcvdte:date
       and @+invdtl.bill_through_dte:date
       and @+invdtl.expire_dte:date
       and @+invdtl.phdflg
       and @+invdtl.orgcod
       and @+invdtl.lotnum
       and @+invdtl.sup_lotnum
       and @+invdtl.revlvl 
       and @+invdtl.invsts 
       and @+invdtl.cnsg_flg
       and @+invdtl.hld_flg
       and @+invdtl.untpak 
       and @+invdtl.untcas 
       and @+invdtl.untqty
       and @+invdtl.catch_qty
       and @+invdtl.rcvkey
       and @+invdtl.ship_line_id
       and @+invdtl.cmpkey
       and @+invdtl.inv_attr_str1
       and @+invdtl.inv_attr_str2
       and @+invdtl.inv_attr_str3
       and @+invdtl.inv_attr_str4
       and @+invdtl.inv_attr_str5
       and @+invdtl.inv_attr_str6
       and @+invdtl.inv_attr_str7
       and @+invdtl.inv_attr_str8
       and @+invdtl.inv_attr_str9
       and @+invdtl.inv_attr_str10
       and @+invdtl.inv_attr_int1
       and @+invdtl.inv_attr_int2
       and @+invdtl.inv_attr_int3
       and @+invdtl.inv_attr_int4
       and @+invdtl.inv_attr_int5
       and @+invdtl.inv_attr_flt1
       and @+invdtl.inv_attr_flt2
       and @+invdtl.inv_attr_flt3
       and @+invdtl.inv_attr_dte1:date
       and @+invdtl.inv_attr_dte2:date
       and @+invdtl.cstms_cnsgnmnt_id
       and @+invdtl.rttn_id
       and @+invdtl.dty_stmp_flg
       and @+invdtl.cstms_bond_flg
       and (@days_to_expire is null
            or invdtl.expire_dte is null
            or nvl(round(moca_util.date_diff_days(sysdate, invdtl.expire_dte)), 
           nvl(cast(@days_to_expire as int), 1)+1)
           = nvl(cast(@days_to_expire as int), 
             nvl(round(moca_util.date_diff_days(sysdate, invdtl.expire_dte)), 
               nvl(cast(@days_to_expire as int), 1)+1)))
       and (@min_days_to_expire is null
            or invdtl.expire_dte is null
            or nvl(round(moca_util.date_diff_days(sysdate, invdtl.expire_dte)), 
           nvl(cast(@min_days_to_expire as int),1)-1) 
           >= nvl(cast(@min_days_to_expire as int), 
              nvl(round(moca_util.date_diff_days(sysdate, invdtl.expire_dte)), 
              nvl(cast(@min_days_to_expire as int), 1)-1)))
       and (@max_days_to_expire is null
            or invdtl.expire_dte is null
            or nvl(round(moca_util.date_diff_days(sysdate, invdtl.expire_dte)), 
           nvl(cast(@max_days_to_expire as int), 1)+1) 
           <= nvl(cast(@max_days_to_expire as int), 
              nvl(round(moca_util.date_diff_days(sysdate, invdtl.expire_dte)), 
              nvl(cast(@max_days_to_expire as int), 1)+1)))
       and invdtl.prtnum != 'RETURNPART'
      left outer join inv_ser_num
        on ((inv_ser_num.invtid = invlod.lodnum 
       and inv_ser_num.ser_lvl = 'L')
        or (inv_ser_num.invtid = invsub.subnum 
       and inv_ser_num.ser_lvl = 'S')
        or (inv_ser_num.invtid = invdtl.dtlnum 
       and inv_ser_num.ser_lvl = 'D'))
       and not exists (select 'x'
	             from inv_ser_num isn 
	            where isn.invtid = inv_ser_num.invtid 
	              and isn.ser_num_typ_id > inv_ser_num.ser_num_typ_id)
      left outer join manfst
        on (invdtl.subnum = manfst.subnum)
        or (invdtl.wrkref = manfst.wrkref)
      left outer join prtmst_view
        on (locmst.wh_id = prtmst_view.wh_id)
       and (invdtl.prtnum = prtmst_view.prtnum)
       and (invdtl.prt_client_id = prtmst_view.prt_client_id)
      left outer join prtftp
        on (prtmst_view.wh_id  = prtftp.wh_id)
       and (prtmst_view.prtnum = prtftp.prtnum)
       and (prtmst_view.prt_client_id = prtftp.prt_client_id)
       and ((invdtl.ftpcod = prtftp.ftpcod)
           or (prtftp.defftp_flg = decode(invdtl.ftpcod,NULL,1,cast(null as int))))
      left outer join prtftp_dtl
        on (prtftp.wh_id = prtftp_dtl.wh_id)
       and (prtftp.prtnum = prtftp_dtl.prtnum)
       and (prtftp.prt_client_id = prtftp_dtl.prt_client_id)
       and (prtftp.ftpcod = prtftp_dtl.ftpcod)
       and (prtftp_dtl.uomcod = nvl(prtmst_view.dspuom, prtmst_view.stkuom))
      left outer join prtdsc
        on (prtdsc.colval = /*=varchar(*/ prtmst_view.prtnum||'|'||prtmst_view.prt_client_id||'|'||prtmst_view.wh_id_tmpl) /*=)*/
       and prtdsc.colnam = 'prtnum|prt_client_id|wh_id_tmpl' 
       and prtdsc.locale_id = nvl(@locale_id, @@locale_id) 
      left outer join asset_link parent_asset_link
        on (parent_asset_link.asset_num = invlod.lodnum) 
      left outer join asset_typ parent_asset_typ
        on (parent_asset_typ.asset_typ = invlod.asset_typ)
      left outer join asset_link child_asset_link
        on (child_asset_link.asset_num = invsub.subnum) 
      left outer join asset_typ child_asset_typ
        on (invsub.asset_typ = child_asset_typ.asset_typ)
     where @client_in_clause:raw
       and @+inv_ser_num.ser_num
       and @+inv_ser_num.ser_lvl     
       and @+manfst.traknm
       and @+parent_asset_link.asset_id
       and @+parent_asset_link.asset_id^parent_asset_id
       and @+prtmst_view.dept_cod
       and @*
     group by bldg_mst.wh_id,
              aremst.bldg_id,
              aremst.arecod,
              locmst.stoloc,
              invlod.lodnum, 
              invsub.subnum,
              manfst.traknm,
              invdtl.cstms_cnsgnmnt_id,
              invdtl.rttn_id,
              invdtl.dty_stmp_flg,
              invdtl.cstms_bond_flg,
              prtmst_view.dspuom,
              prtmst_view.dept_cod,
              prtftp_dtl.untqty,
              prtmst_view.stkuom
     order by bldg_mst.wh_id,
              aremst.bldg_id,
              aremst.arecod,
              locmst.stoloc,
              manfst.traknm,
              invlod.lodnum,
              invsub.subnum] catch (-1403)
]]>
</local-syntax>

<argument name="@*">Any invlod, invsub field value</argument>

<documentation>

<remarks>
<![CDATA[
  <p>
  This command is used to list the inventory subload information. </p>

  <p>
  The results of this command include the inventory load, sub,
  and summary of details for each subnum.
  </p>
  <p>
  Note, this command respects restricted client access.  The user will
  only be able to see inventories for clients that he is authorized to see.
  </p>
]]>
</remarks>

<seealso cref="validate storage trailer at dock door"> </seealso>

<retcol name="(all invsub fields)" type="(varies according to field type)"> </retcol>

<exception value="eOK">Normal successful completion</exception>
<exception value="eDB_NO_ROWS_AFFECTED">Specified pick batch not found</exception>

</documentation>

</command>
